from fastapi import FastAPI, HTTPException, Depends
from database import Base, engine
from models import User
from schemas import LoginRequest, RegisterRequest, TokenResponse
from auth import get_db, create_token, hash_password, verify_password
from transactions import router as transactions_router
from sqlalchemy.orm import Session
from users import router as user_router
from categories import router as categories_router


app = FastAPI(
    title="üè¶ KizuFinTech API",
    description="""
    API-—Å–µ—Ä–≤–∏—Å –¥–ª—è Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è KizuFinTech.

    üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    - üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    - üë§ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    ‚ö†Ô∏è API —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """,
    version="1.0.1",
    docs_url="/docs",
    redoc_url="/redoc",
    license_info={
        "name": "Apache License 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    }
)

Base.metadata.create_all(bind=engine)


@app.post("/register", response_model=TokenResponse, tags=["üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
def register(data: RegisterRequest, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == data.username).first():
        raise HTTPException(status_code=400, detail="Username already taken")
    if db.query(User).filter(User.email == data.email).first():
        raise HTTPException(status_code=400, detail="Email already registered")

    user = User(
        username=data.username,
        email=data.email,
        name=data.name,
        password=hash_password(data.password)
    )
    db.add(user)
    db.commit()
    db.refresh(user)

    token = create_token(user)
    return TokenResponse(
        id=user.id,
        token=token,
        username=user.username,
        email=user.email,
        name=user.name
    )

@app.post("/login", response_model=TokenResponse, tags=["üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
def login(data: LoginRequest, db: Session = Depends(get_db)):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç **application/json**:
    {
      "username": "ivan123",
      "password": "secret1234"
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω –∏ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    user = db.query(User).filter(User.username == data.username).first()
    if not user or not verify_password(data.password, user.password):
        raise HTTPException(401, "Invalid credentials")

    token = create_token(user)
    return TokenResponse(
        id=user.id,
        token=token,
        username=user.username,
        email=user.email,
        name=user.name,
    )

app.include_router(user_router, prefix="/users", tags=["üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
app.include_router(transactions_router, tags=["üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"])
app.include_router(categories_router, tags=["üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"])
@app.get("/healthz")
def healthz():
    return {"status": "ok"}
