from pydantic import BaseModel, Field
from typing import List, Literal
from datetime import date

# üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
class RegisterRequest(BaseModel):
    username: str = Field(..., example="ivan123", description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)")
    email:    str = Field(..., example="ivan@example.com", description="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞")
    name:     str = Field(..., example="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    password: str = Field(..., example="supersecure123", description="–ü–∞—Ä–æ–ª—å (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤)")

# üîê –í—Ö–æ–¥
class LoginRequest(BaseModel):
    username: str = Field(..., example="ivan123", description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password: str = Field(..., example="supersecure123", description="–ü–∞—Ä–æ–ª—å")

# üîê –û—Ç–≤–µ—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class TokenResponse(BaseModel):
    id:       int
    token:    str
    username: str
    email:    str
    name:     str

    class Config:
        from_attributes = True

# üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–≤—ã–≤–æ–¥)
class CategoryOut(BaseModel):
    id:   int
    name: str
    type: Literal["income", "expense"]

    class Config:
        from_attributes = True

# üí∏ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
class TransactionCreate(BaseModel):
    title:   str                 = Field(..., example="–ü–æ–∫—É–ø–∫–∞ –∫–æ—Ñ–µ")
    amount:  float               = Field(..., example=250.0)
    type_:   Literal["income", "expense"] = Field(..., alias="type", description="income –∏–ª–∏ expense")
    category_ids: List[int]      = Field(..., example=[1,2], description="–°–ø–∏—Å–æ–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    date:    date                = Field(..., example="2025-04-20")

    class Config:
        from_attributes    = True   # –≤–º–µ—Å—Ç–æ orm_mode
        populate_by_name   = True   # —á—Ç–æ–±—ã Pydantic –ø–æ–Ω–∏–º–∞–ª alias="type"

# üí∏ –í—ã–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
class TransactionOut(BaseModel):
    id:        int
    title:     str
    amount:    float
    type_:     Literal["income", "expense"] = Field(..., alias="type")
    date:      date
    categories: List[CategoryOut]

    class Config:
        from_attributes    = True
        populate_by_name   = True